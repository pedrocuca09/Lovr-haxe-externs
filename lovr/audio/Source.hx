package lovr.audio;

import haxe.extern.EitherType;

/**
 * Represents an audio source (sound or stream).
 * https://lovr.org/docs/Source
 */
extern class Source {
  public function play():Void;
  public function pause():Void;
  public function stop():Void;
  public function rewind():Void;
  public function isPlaying():Bool;
  public function setVolume(volume:Float):Void;
  public function getVolume():Float;
  public function setPitch(pitch:Float):Void;
  public function getPitch():Float;
  public function setPosition(x:Float, y:Float, z:Float):Void;
  public function getPosition():Array<Float>;
  public function setLooping(looping:Bool):Void;
  public function isLooping():Bool;
  public function seek(position:Float):Void;
  public function tell():Float;
  public function setEffect(name:String, enable:Bool):Void;
  public function isEffectEnabled(name:String):Bool;
  public function setAttenuation(attenuation:Float):Void;
  public function getAttenuation():Float;
  public function setRadius(radius:Float):Void;
  public function getRadius():Float;
  public function setCone(innerAngle:Float, outerAngle:Float, outerVolume:Float):Void;
  public function getCone():Array<Float>;
  public function setDirection(x:Float, y:Float, z:Float):Void;
  public function getDirection():Array<Float>;
  public function setVelocity(x:Float, y:Float, z:Float):Void;
  public function getVelocity():Array<Float>;
  public function setDopplerScale(scale:Float):Void;
  public function getDopplerScale():Float;
  public function setAirAbsorption(absorption:Float):Void;
  public function getAirAbsorption():Float;
  public function setRolloff(rolloff:Float):Void;
  public function getRolloff():Float;
  public function setDistance(min:Float, max:Float):Void;
  public function getDistance():Array<Float>;
  public function setConeAttenuation(innerAngle:Float, outerAngle:Float, outerVolume:Float):Void;
  public function getConeAttenuation():Array<Float>;
  public function setRelative(relative:Bool):Void;
  public function isRelative():Bool;
  public function setType(type:String):Void;
  public function getType():String;
  public function setBuffer(buffer:Dynamic):Void;
  public function getBuffer():Dynamic;
  public function setFilter(filter:String, value:Float):Void;
  public function getFilter(filter:String):Float;
  public function setResampler(resampler:String):Void;
  public function getResampler():String;
  public function setSpatial(spatial:Bool):Void;
  public function isSpatial():Bool;
  public function setStereoAngle(angle:Float):Void;
  public function getStereoAngle():Float;
  public function setStereoSpread(spread:Float):Void;
  public function getStereoSpread():Float;
  public function setStereoPan(pan:Float):Void;
  public function getStereoPan():Float;
  public function setStereoWidth(width:Float):Void;
  public function getStereoWidth():Float;
  public function setStereoBalance(balance:Float):Void;
  public function getStereoBalance():Float;
  public function setStereoPhase(phase:Float):Void;
  public function getStereoPhase():Float;
  public function setStereoDelay(delay:Float):Void;
  public function getStereoDelay():Float;
  public function setStereoDepth(depth:Float):Void;
  public function getStereoDepth():Float;
  public function setStereoHeight(height:Float):Void;
  public function getStereoHeight():Float;
  public function setStereoAzimuth(azimuth:Float):Void;
  public function getStereoAzimuth():Float;
  public function setStereoElevation(elevation:Float):Void;
  public function getStereoElevation():Float;
  public function setStereoDistance(distance:Float):Void;
  public function getStereoDistance():Float;
  public function setStereoSpreadAngle(angle:Float):Void;
  public function getStereoSpreadAngle():Float;
  public function setStereoSpreadWidth(width:Float):Void;
  public function getStereoSpreadWidth():Float;
  public function setStereoSpreadHeight(height:Float):Void;
  public function getStereoSpreadHeight():Float;
  public function setStereoSpreadDepth(depth:Float):Void;
  public function getStereoSpreadDepth():Float;
  public function setStereoSpreadAzimuth(azimuth:Float):Void;
  public function getStereoSpreadAzimuth():Float;
  public function setStereoSpreadElevation(elevation:Float):Void;
  public function getStereoSpreadElevation():Float;
  public function setStereoSpreadDistance(distance:Float):Void;
  public function getStereoSpreadDistance():Float;
  public function setStereoSpreadAngleWidth(angle:Float, width:Float):Void;
  public function getStereoSpreadAngleWidth():Array<Float>;
  public function setStereoSpreadAngleHeight(angle:Float, height:Float):Void;
  public function getStereoSpreadAngleHeight():Array<Float>;
  public function setStereoSpreadAngleDepth(angle:Float, depth:Float):Void;
  public function getStereoSpreadAngleDepth():Array<Float>;
  public function setStereoSpreadAngleAzimuth(angle:Float, azimuth:Float):Void;
  public function getStereoSpreadAngleAzimuth():Array<Float>;
  public function setStereoSpreadAngleElevation(angle:Float, elevation:Float):Void;
  public function getStereoSpreadAngleElevation():Array<Float>;
  public function setStereoSpreadAngleDistance(angle:Float, distance:Float):Void;
  public function getStereoSpreadAngleDistance():Array<Float>;
} 